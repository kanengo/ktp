// Code generated by protoc-gen-go-hertz. DO NOT EDIT.
// versions:
// - protoc-gen-go-hertz v1.0.0
// - protoc             v3.12.4
// source: test.proto

package testpb

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/config"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/kanengo/ktp/transport/hertz"
)

const OperationTestServiceSayHello = "/TestService/SayHello"
const OperationTestServiceGetUser = "/TestService/GetUser"
const OperationTestServiceCreateUser = "/TestService/CreateUser"

type TestServiceHertzServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
}

type TestServiceHertzMiddleware interface {
	SayHelloMiddleware() []app.HandlerFunc
	GetUserMiddleware() []app.HandlerFunc
	CreateUserMiddleware() []app.HandlerFunc
}

func RegisterTestServiceHertzServer(s *hertz.Server, srv TestServiceHertzServer, mw TestServiceHertzMiddleware, routeMw ...app.HandlerFunc) {
	r := s.Group("/", routeMw...)
	r.POST("/v1/hello", _TestService_SayHello0_Hertz_Handler(s, srv, mw)...)
	r.GET("/v1/users/:user_id", _TestService_GetUser0_Hertz_Handler(s, srv, mw)...)
	r.POST("/v1/users", _TestService_CreateUser0_Hertz_Handler(s, srv, mw)...)
}

func _TestService_SayHello0_Hertz_Handler(s *hertz.Server, srv TestServiceHertzServer, mw TestServiceHertzMiddleware) []app.HandlerFunc {
	var handlers []app.HandlerFunc
	if mw != nil {
		handlers = append(handlers, mw.SayHelloMiddleware()...)
	}
	h := func(ctx context.Context, c *app.RequestContext) {
		var err error
		var req HelloRequest
		err = c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp, err := srv.SayHello(ctx, &req)
		if err != nil {
			s.ErrorEncoder(ctx, c, err)
			return
		}
		s.ResponseEncoder(ctx, c, resp)
		return
	}

	return append(handlers, h)
}

func _TestService_GetUser0_Hertz_Handler(s *hertz.Server, srv TestServiceHertzServer, mw TestServiceHertzMiddleware) []app.HandlerFunc {
	var handlers []app.HandlerFunc
	if mw != nil {
		handlers = append(handlers, mw.GetUserMiddleware()...)
	}
	h := func(ctx context.Context, c *app.RequestContext) {
		var err error
		var req GetUserRequest
		err = c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp, err := srv.GetUser(ctx, &req)
		if err != nil {
			s.ErrorEncoder(ctx, c, err)
			return
		}
		s.ResponseEncoder(ctx, c, resp)
		return
	}

	return append(handlers, h)
}

func _TestService_CreateUser0_Hertz_Handler(s *hertz.Server, srv TestServiceHertzServer, mw TestServiceHertzMiddleware) []app.HandlerFunc {
	var handlers []app.HandlerFunc
	if mw != nil {
		handlers = append(handlers, mw.CreateUserMiddleware()...)
	}
	h := func(ctx context.Context, c *app.RequestContext) {
		var err error
		var req CreateUserRequest
		err = c.BindAndValidate(&req)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp, err := srv.CreateUser(ctx, &req)
		if err != nil {
			s.ErrorEncoder(ctx, c, err)
			return
		}
		s.ResponseEncoder(ctx, c, resp)
		return
	}

	return append(handlers, h)
}

type TestServiceHertzClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...config.RequestOption) (rsp *HelloResponse, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...config.RequestOption) (rsp *GetUserResponse, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...config.RequestOption) (rsp *CreateUserResponse, err error)
}

type TestServiceHertzClientImpl struct {
	cc   *hertz.Client
	host string
}

// NewTestServiceHertzClient creates a new TestService client
func NewTestServiceHertzClient(client *hertz.Client, host string) TestServiceHertzClient {
	return &TestServiceHertzClientImpl{client, host}
}

func (c *TestServiceHertzClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...config.RequestOption) (*HelloResponse, error) {
	uri := c.host + "/v1/hello"
	var out HelloResponse

	err := c.cc.Do(ctx, uri, "POST", in, &out, opts...)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *TestServiceHertzClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...config.RequestOption) (*GetUserResponse, error) {
	uri := c.host + "/v1/users/" + in.UserId
	var out GetUserResponse

	err := c.cc.Do(ctx, uri, "GET", in, &out, opts...)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

func (c *TestServiceHertzClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...config.RequestOption) (*CreateUserResponse, error) {
	uri := c.host + "/v1/users"
	var out CreateUserResponse

	err := c.cc.Do(ctx, uri, "POST", in, &out, opts...)
	if err != nil {
		return nil, err
	}

	return &out, nil
}

type TestServiceHertzLocalImpl struct {
	impl TestServiceHertzServer
}

func NewTestServiceHertzLocalImpl(impl TestServiceHertzServer) TestServiceHertzClient {
	return &TestServiceHertzLocalImpl{impl}
}

func (c *TestServiceHertzLocalImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...config.RequestOption) (*HelloResponse, error) {
	return c.impl.SayHello(ctx, in)
}

func (c *TestServiceHertzLocalImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...config.RequestOption) (*GetUserResponse, error) {
	return c.impl.GetUser(ctx, in)
}

func (c *TestServiceHertzLocalImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...config.RequestOption) (*CreateUserResponse, error) {
	return c.impl.CreateUser(ctx, in)
}